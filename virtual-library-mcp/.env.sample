# Virtual Library MCP Server Configuration
# 
# Copy this file to .env and customize for your environment
# NEVER commit .env to version control!

# === Server Metadata ===
# These identify your MCP server to clients
VIRTUAL_LIBRARY_SERVER_NAME=virtual-library
VIRTUAL_LIBRARY_SERVER_VERSION=0.1.0

# === Database Configuration ===
# Path to SQLite database file
# Use absolute paths for production deployments
VIRTUAL_LIBRARY_DATABASE_PATH=./virtual_library.db

# === Transport Configuration ===
# Primary transport: stdio or streamable_http
# stdio: For local CLI usage (recommended for development)
# streamable_http: For HTTP-based clients with optional streaming (future feature)
VIRTUAL_LIBRARY_TRANSPORT=stdio

# HTTP transport settings (for future Streamable HTTP support)
# Only used when TRANSPORT=streamable_http
VIRTUAL_LIBRARY_HTTP_HOST=127.0.0.1
VIRTUAL_LIBRARY_HTTP_PORT=8080

# === Security Configuration ===
# External API credentials (if integrating with book APIs)
# Example: Google Books API, Open Library API, etc.
# VIRTUAL_LIBRARY_EXTERNAL_API_KEY=your-api-key-here

# === Performance Configuration ===
# Maximum concurrent operations (affects resource usage)
VIRTUAL_LIBRARY_MAX_CONCURRENT_OPERATIONS=10

# Cache time-to-live in seconds (0 to disable caching)
VIRTUAL_LIBRARY_RESOURCE_CACHE_TTL=300

# === Development Configuration ===
# Enable debug mode (verbose protocol logging)
VIRTUAL_LIBRARY_DEBUG=false

# Logging level: DEBUG, INFO, WARNING, ERROR
VIRTUAL_LIBRARY_LOG_LEVEL=INFO

# === MCP Feature Flags ===
# Control which MCP capabilities are exposed to clients

# Enable LLM sampling (server-initiated completions)
VIRTUAL_LIBRARY_ENABLE_SAMPLING=true

# Enable resource subscriptions (real-time updates)
VIRTUAL_LIBRARY_ENABLE_SUBSCRIPTIONS=true

# Enable progress notifications (for long-running operations)
VIRTUAL_LIBRARY_ENABLE_PROGRESS_NOTIFICATIONS=true

# === Observability Configuration (Logfire) ===
# Enable observability middleware for MCP protocol tracing
LOGFIRE_ENABLED=true

# Send telemetry data to Logfire cloud (requires token)
LOGFIRE_SEND=true

# Show telemetry in console output (useful for development)
LOGFIRE_CONSOLE=false

# Logfire authentication token (get from https://logfire.pydantic.dev)
# Required only if LOGFIRE_SEND=true
# LOGFIRE_TOKEN=your-token-here

# Environment name for telemetry (development, staging, production)
ENVIRONMENT=development

# Debug mode for verbose observability logging
LOGFIRE_DEBUG=false
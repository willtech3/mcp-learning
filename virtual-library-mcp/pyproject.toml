[project]
name = "virtual_library_mcp"
version = "0.1.0"
description = "A comprehensive MCP server demonstrating library management system with all MCP protocol features"
authors = [
    {name = "MCP Learning Project", email = "example@example.com"}
]
# readme = "README.md"  # Will be created in Phase 5
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["mcp", "model-context-protocol", "library", "education", "server"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Education",
]

# Core dependencies for MCP server functionality
dependencies = [
    # MCP framework - provides the server foundation
    "fastmcp>=2.0.0",
    
    # Data validation and serialization - critical for MCP protocol compliance
    "pydantic>=2.0.0",
    
    # Database ORM for persistent data storage
    "sqlalchemy>=2.0.0",
    
    # Test data generation for realistic library catalog
    "faker>=24.0.0",
    
    # Environment variable management for configuration
    "python-dotenv>=1.0.0",
    
    # HTTP client for external API integrations (future use)
    "httpx>=0.26.0",
]

[project.optional-dependencies]
# Development tools - separate from runtime dependencies
dev = [
    # Testing framework
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    
    # Code formatting and linting
    "ruff>=0.3.0",
    
    # Type checking - crucial for MCP protocol implementation
    "pyright>=1.1.350",
    
    # Development server utilities
    "watchdog>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/example/virtual-library-mcp"
Repository = "https://github.com/example/virtual-library-mcp"
Documentation = "https://github.com/example/virtual-library-mcp/docs"
Issues = "https://github.com/example/virtual-library-mcp/issues"

[project.scripts]
# Entry point for running the MCP server
virtual-library-mcp = "server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

# Tool configurations for development workflow

[tool.ruff]
# Python version compatibility
target-version = "py312"
# MCP servers often have longer function names due to protocol requirements
# (e.g., handle_tools_list_request, validate_json_rpc_message)
line-length = 100
indent-width = 4

[tool.ruff.lint]
# Enable comprehensive linting rules for MCP development
select = [
    "E",   # pycodestyle errors - catches basic Python errors
    "W",   # pycodestyle warnings - identifies potential issues
    "F",   # Pyflakes - finds undefined names, crucial for protocol handlers
    "UP",  # pyupgrade - keeps code modern, important for async MCP operations
    "B",   # flake8-bugbear - catches common bugs in protocol implementations
    "SIM", # flake8-simplify - simplifies complex protocol handling logic
    "I",   # isort - maintains consistent imports for protocol modules
    "N",   # pep8-naming - ensures protocol methods follow conventions
    "C4",  # flake8-comprehensions - optimizes data transformations
    "TCH", # flake8-type-checking - prevents circular imports in type annotations
    "T20", # flake8-print - prevents debug prints in production MCP servers
    "RUF", # Ruff-specific rules - additional safety checks
    "ASYNC", # flake8-async - critical for async MCP server operations
    "DTZ", # flake8-datetimez - ensures timezone-aware timestamps in logs
    "LOG", # flake8-logging - proper logging for protocol debugging
    "G",   # flake8-logging-format - consistent log formatting
    "PIE", # flake8-pie - miscellaneous lints
    "PT",  # flake8-pytest-style - consistent test patterns for protocol tests
    "RET", # flake8-return - simplifies return statements in handlers
    "SLF", # flake8-self - prevents private member access
    "ARG", # flake8-unused-arguments - catches unused protocol parameters
    "PTH", # flake8-use-pathlib - modern path handling for resources
    "ERA", # eradicate - removes commented code
    "PD",  # pandas-vet - even though we don't use pandas, good practices
    "PGH", # pygrep-hooks - various code quality checks
    "PL",  # Pylint - additional code quality checks
    "TRY", # tryceratops - exception handling best practices
    "NPY", # NumPy-specific rules - good practices even without NumPy
    "PERF", # Perflint - performance anti-patterns
]

# Ignore rules that conflict with MCP development patterns
ignore = [
    "E501",  # line too long (handled by line-length setting)
    "T20",   # Allow print statements for educational/debugging purposes
    "TRY003", # Long exception messages are OK for protocol errors
    "PLR0913", # MCP handlers may need many parameters
    "PLR2004", # Magic values are OK for protocol constants
    "SLF001", # Private member access needed for some FastMCP internals
    "UP017", # timezone.utc is the correct usage, not UTC alias
    "UP046", # Generic[T] syntax is fine for this project
    "PLR0912", # Complex search methods need many branches
    "N818", # RepositoryException is a clear name
    "TRY300", # Return in try block is acceptable
    "TRY301", # Abstract raise to inner function - overly restrictive for our use case
    "RUF012", # Mutable defaults in Pydantic models are handled correctly
    "SIM105", # Try-except-pass is fine for optional JSON parsing
    "PERF401", # List comprehensions not always more readable
    "N806", # Variable names in tests can use uppercase
    "DTZ005", # datetime.now() without timezone - using local timezone for simulated library
    "DTZ011", # date.today() is appropriate for local date comparisons in this project
    "N999", # Invalid module name - project directory has hyphens but package name uses underscores
    "PLR0915", # Too many statements - acceptable for complex functions in this project
    "PLC0415", # Import placement - acceptable for scripts and examples
    "G004", # Logging format - minor issue, acceptable for this project
    "TRY401", # Redundant exception object - acceptable for this project
]

# MCP-specific configurations
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",  # assert is OK in tests
    "ARG",   # unused arguments OK in test fixtures
    "PLR2004", # magic values OK in tests
    "SLF001", # private access OK for testing internals
]
"src/server.py" = [
    "PLR0913", # Many parameters OK for server initialization
]

[tool.ruff.format]
# Use double quotes for consistency with MCP protocol JSON strings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Preserve string quotes style to match JSON protocol examples
docstring-code-format = true
docstring-code-line-length = 80

[tool.pyright]
# Type checking configuration - essential for MCP protocol implementation
include = [
    "database",
    "models", 
    "prompts",
    "resources",
    "tools",
    "server.py",
    "config.py",
    "__init__.py"
]  # Only type check source code, not tests
exclude = [
    "**/__pycache__",
    "**/node_modules",
    "**/.venv",
    "**/venv",
    "**/htmlcov",
    "**/build",
    "**/dist",
    "tests",  # Explicitly exclude tests
    "examples",  # Examples can have relaxed typing
    "scripts",  # Scripts may have different requirements
    "data"  # Data files don't need type checking
]
pythonVersion = "3.12"
pythonPlatform = "All"

# Default type checking mode
typeCheckingMode = "basic"

# Import resolution for MCP modules
stubPath = "typings"
venvPath = "."
venv = ".venv"

# Type annotation requirements - balanced approach per CLAUDE.md
reportMissingParameterType = "none"  # Don't require types on all parameters
reportUnknownParameterType = "warning"  # Warn about unknown types but don't error
reportMissingTypeArgument = "none"  # Allow generic types without arguments
reportUnknownMemberType = "warning"  # Warn about SQLAlchemy dynamic attributes
reportUnknownArgumentType = "warning"  # Warn on SQLAlchemy expressions (not error)

# Keep strict for critical errors
reportMissingTypeStubs = "warning"  # Some deps may lack stubs
reportMissingImports = "error"
reportMissingModuleSource = "warning"

# Type safety for protocol implementation
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "warning"  # Event listeners appear unused
reportUnusedVariable = "error"
reportDuplicateImport = "error"

# MCP protocol requires precise type handling
reportGeneralTypeIssues = "warning"  # SQLAlchemy causes too many false positives
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "error"
reportInvalidTypeVarUse = "error"
reportDataclassFieldWithoutDefault = "error"
reportUntypedFunctionDecorator = "none"  # Decorators often don't need types
reportUntypedClassDecorator = "none"  # Class decorators rarely need types
reportUntypedBaseClass = "none"  # Base classes from libs may lack types
reportUntypedNamedTuple = "error"

# Async handling critical for MCP servers
reportInvalidStringEscapeSequence = "error"
reportUnusedCoroutine = "error"
reportUnnecessaryAwait = "error"

# Optional handling - SQLAlchemy often returns Optional types
reportOptionalSubscript = "warning"  # SQLAlchemy queries may return None
reportOptionalMemberAccess = "warning"  # SQLAlchemy relationships can be None
reportOptionalCall = "warning"  # SQLAlchemy query methods
reportOptionalIterable = "warning"  # SQLAlchemy result sets
reportOptionalContextManager = "warning"  # Session contexts
reportOptionalOperand = "warning"  # SQLAlchemy filter comparisons

# Type completeness - relaxed per audit
reportUnknownLambdaType = "none"  # Lambda types in mcp_safe_query are noise
reportUnknownVariableType = "none"  # Partial types are often fine in practice

# Allow some flexibility for educational code
reportCallInDefaultInitializer = "none"  # OK for simple defaults
reportImplicitStringConcatenation = "none"  # OK for long strings
reportMissingSuperCall = "warning"  # Warn but don't error
reportUninitializedInstanceVariable = "error"
reportCallIssue = "warning"  # Catch call signature mismatches
reportAttributeAccessIssue = "warning"  # SQLAlchemy dynamic attributes
reportArgumentType = "warning"  # SQLAlchemy expressions vs values
reportInvalidTypeForm = "warning"  # TypeVar bound to Base is valid
reportReturnType = "warning"  # SQLAlchemy property type inference issues

# Test-specific overrides for clarity over type purity
[[tool.pyright.executionEnvironments]]
root = "./tests"
reportUnknownParameterType = "none"  # Test fixtures often have dynamic types
reportUnknownMemberType = "none"  # Mock objects and fixtures
reportUnknownArgumentType = "none"  # Test data often has flexible types
reportCallIssue = "none"  # Optional parameters in model constructors
reportOptionalOperand = "none"  # Date comparisons in tests

[tool.pytest.ini_options]
# Testing configuration for MCP server
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    # Coverage reporting helps ensure MCP protocol compliance
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]
# Enable async testing for MCP server operations
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[dependency-groups]
dev = [
    "pyright>=1.1.403",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.5",
    "watchdog>=6.0.0",
]
